{".source.js":{"plugin (animation)":{"prefix":"pluginAnimation","body":"jQuery.fn.${1:myeffect} = function(speed, easing, callback) {\n\treturn this.animate({${2:param1}: ${3:'value'}}, speed, easing, callback);\n};"},"plugin (widget)":{"prefix":"pluginWidget","body":"// jQuery ${1:pluginName} Plugin\n(function($) {\n\tvar settings = {\n\t\t${30:}\n\t};\n\n\tvar methods = {\n\t\tinit: function(options) {\n\n\t\t\tthis.each(function() {\n\t\t\t\tvar data, dataId, opts;\n\t\t\t\tvar ${10:$this} = $(this);\n\n\t\t\t\t${10:$this}.$1('options', options);\n\t\t\t\tdata = ${10:$this}.data('$1') || {};\n\t\t\t\topts = data.options;\n\n\t\t\t\t// If the plugin hasn't been initialized yet\n\t\t\t\tif ( !data.$1 ) {\n\t\t\t\t\tdataId = +new Date();\n\n\t\t\t\t\tdata = {\n\t\t\t\t\t\t$1: true,\n\t\t\t\t\t\toptions: opts,\n\t\t\t\t\t\tid: dataId\n\t\t\t\t\t};\n\n\t\t\t\t\t${14:// create element and append to body\n\t\t\t\t\tvar \\$$1 = $('<div></div>')\n\t\t\t\t\t.attr({\n\t\t\t\t\t\t'class': '$1'\n\t\t\t\t\t\\})\n\t\t\t\t\t.appendTo('body');\n\n\t\t\t\t\t// Associate created element with invoking element\n\t\t\t\t\t\\$$1.data( '$1', {target: ${10:$this}, id: dataId\\} );\n\n\t\t\t\t\t// And vice versa\n\t\t\t\t\tdata.$1 = \\$$1;\n}\n\t\t\t\t\t${10:$this}.data('$1', data);\n\t\t\t\t} // !data.$1\n\t\t\t\t$0\n\t\t\t});\n\n\t\t\treturn this;\n\t\t},\n\t\tdestroy: function() {\n\n\t\t\tthis.each(function() {\n\n\t\t\t\tvar ${10:$this} = $(this);\n\t\t\t\tvar data = ${10:$this}.data('$1');\n\n\t\t\t\t// Remove created elements, unbind namespaced events, and remove data\n\t\t\t\t$(document).off('.$1');\n\t\t\t\tdata.$1.remove();\n\t\t\t\t${10:$this}.off('.$1')\n\t\t\t\t.removeData('$1');\n\n\t\t\t});\n\n\t\t\treturn this;\n\t\t},\n\t\toptions: function(options) {\n\n\t\t\tthis.each(function() {\n\t\t\t\tvar ${10:$this} = $(this);\n\n\t\t\t\t// don't use our getData() function here\n\t\t\t\t// because we want an object regardless\n\t\t\t\tvar data = ${10:$this}.data('$1') || {};\n\t\t\t\tvar opts = data.options || {};\n\n\t\t\t\t// deep extend (merge) default settings, per-call options, and options set with:\n\t\t\t\t// html10 data-$1 options JSON and $('selector').$1('options', {});\n\t\t\t\topts = $.extend( true, {}, $.fn.$1.defaults, opts, options || {} );\n\t\t\t\tdata.options = opts;\n\t\t\t\t$.data(this, '$1', data);\n\t\t\t});\n\n\t\t\treturn this;\n\t\t}\n\t};\n\n\tvar protoSlice = Array.prototype.slice;\n\n\t$.fn.$1 = function(method) {\n\n\t\tif (methods[method]) {\n\t\t\treturn methods[method].apply(this, protoSlice.call( arguments, 1));\n\t\t} else if (typeof method === 'object' || ! method) {\n\t\t\treturn methods.init.apply( this, arguments );\n\t\t} else {\n\t\t\t$.error('Method ' +  method + ' does not exist on jQuery.fn.$1');\n\t\t}\n\n\t};\n\n\t$.extend($.fn.$1, {\n\t\tdefaults: settings\n\t});\n\n\tfunction getData(el) {\n\t\tvar $1, opts;\n\t\tvar ${10:$this} = $(el);\n\t\tvar data = ${10:$this}.data('$1') || {};\n\n\t\tif (!data.$1) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn data;\n\t}\n\n})(jQuery);\n"},"plugin (selector)":{"prefix":"pluginSelector","body":"(function($) {\n\t$.extend($.expr[':'], {\n\t\t${1:selectorName}: function(element, index, matches, set) {\n\t\t\t$0\n\n\t\t\treturn something;\n\t\t}\n\t});\n})(jQuery);\n"},"plugin (basic)":{"prefix":"pluginBasic","body":"(function($) {\n\t${2:// ${3:What does the $1 plugin do?}}\n\t$.fn.${1:pluginName} = function(options) {\n\n\t\tif (!this.length) { return this; }\n\n\t\tvar opts = $.extend(${5:true, }{}, $.fn.$1.defaults, options);\n\n\t\tthis.each(function() {\n\t\t\tvar ${6:$this} = $(this);\n\t\t\t$0\n\t\t});\n\n\t\treturn this;\n\t};\n\n\t// default options\n\t$.fn.$1.defaults = {\n\t\t${4:defaultOne: true,\n\t\tdefaultTwo: false,\n\t\tdefaultThree: 'yay!'}\n\t};\n\n})(jQuery);\n"}}}